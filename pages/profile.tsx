import Head from "next/head";
import Box from "@/components/Box";
import { Adjust, TrendingDown, CalendarToday } from "@mui/icons-material";
import axios from "axios";
import { useState, useEffect } from "react";
import { useRouter } from "next/router";

// Here you would fetch and return the user
// const useUser = () => ({ user: null, loading: false })

export default function Boxes() {
  const [user, setUser] = useState({
    uid: "",
  });

  const [minimumTradingDays, setMinimumTradingDays] = useState({
    Minimum: "",
    CurrentResult: "",
    Reached: false,
  });
  const [profitTarget, setProfitTarget] = useState({
    MinimumProfit: "",
    CurrentResult: "",
    Reached: false,
  });
  const [dailyLoss, setDailyLoss] = useState({
    MaxDailyLoss: "",
    CurrentResult: "",
    Reached: false,
  });
  const [initialDepositLoss, setInitialDepositLoss] = useState({
    MaxLoss: "",
    CurrentResult: "",
    Reached: false,
  });

  const getData = async () => {
    await axios
      .get(`https://dwb.software:3001/api/get_goals?login=${getLoginFromURL()}`)
      .then((res) => {
        let goalsApi = res.data.goals;
        console.log("res\n", res);
        setMinimumTradingDays({
          Minimum: goalsApi["Minimum Trading Days"].Minimum,
          CurrentResult: goalsApi["Minimum Trading Days"]["Current Result"],
          Reached: goalsApi["Minimum Trading Days"]["Reached"],
        });
        setProfitTarget({
          MinimumProfit: goalsApi["Profit Target"]["Minimum Profit"],
          CurrentResult: goalsApi["Profit Target"]["Current Result"],
          Reached: goalsApi["Profit Target"]["Reached"],
        });
        setDailyLoss({
          MaxDailyLoss: goalsApi["Daily Loss"]["Max Loss"],
          CurrentResult: goalsApi["Daily Loss"]["Current Result"],
          Reached: goalsApi["Daily Loss"]["Reached"],
        });
        setInitialDepositLoss({
          MaxLoss: goalsApi["Initial Deposit Loss"]["Max Loss"],
          CurrentResult: goalsApi["Initial Deposit Loss"]["Current Result"],
          Reached: goalsApi["Initial Deposit Loss"]["Reached"],
        });
      })
      .catch((err) => {
        console.log(err);
      });
  };

  useEffect(() => {
  let login = getLoginFromURL()
    if (login != null) {
      console.log(login);
      setUser({ uid: login });
    }
    let delay = setInterval(async () => {
      await getData();
    }, 30000);
    async function fetchData() {
      await getData();
    }
    fetchData();

    return () => clearInterval(delay);
  }, []);

  // console.log("minimumTradingDays\n",minimumTradingDays)
  // console.log("profitTarget\n",profitTarget)
  // console.log("dailyLoss\n",dailyLoss)
  // console.log("initialDepositLoss\n",initialDepositLoss)
  //

  const getLoginFromURL = () => {
    let params = new URL(window.location.toString()).searchParams;
    let login = params.get("login");
    return login
  }

  return (
    <>
      <Head>
        <title>Funded Max</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="   mx-auto  mt-32  bg-[#1e1f21]  px-10 py-5">
        <p className="text-gray-400 mb-5">Goals Overview</p>
        <div>
          <Box
            icon={<CalendarToday className="h-5 mr-2  inline-block" />}
            title={" Minimum trading days "}
            expectation={["Minimum:", minimumTradingDays.Minimum + " Day"]}
            Result={[
              "Current result:",
              minimumTradingDays.CurrentResult + " Day",
            ]}
            Percent={
              (+minimumTradingDays.CurrentResult /
                +minimumTradingDays.Minimum) *
              100
            }
            chartColor="blue"
            Passed={minimumTradingDays.Reached ? 'Passed' : 'In Progress'}
          />
          <Box
            icon={<Adjust className="h-5 mr-2  inline-block" />}
            title={" Profit Target "}
            expectation={["Minimum: ", profitTarget.MinimumProfit]}
            Result={["Current result: ", profitTarget.CurrentResult]}
            Percent={
              Math.max((+profitTarget.CurrentResult / +profitTarget.MinimumProfit) * 100, 0)
            }
            chartColor="blue"
            Passed={profitTarget.Reached ? 'Passed' : 'In Progress'}
          />
          <Box
            icon={<TrendingDown className="h-5 mr-2  inline-block" />}
            title={" Daily Loss "}
            expectation={["Max. loss: ", dailyLoss.MaxDailyLoss]}
            Result={["Max. loss recorded: ", dailyLoss.CurrentResult]}
            Percent={Math.max((+dailyLoss.CurrentResult / +dailyLoss.MaxDailyLoss) * 100, 0)}
            Passed={dailyLoss.Reached ? 'Failed' : 'Clear'}
            chartColor="blue"
          />
          <Box
            icon={<TrendingDown className="h-5 mr-2  inline-block" />}
            title={" Initial Deposit Loss "}
            expectation={["Max. loss: ", initialDepositLoss.MaxLoss]}
            Result={["Max. loss recorded: ", initialDepositLoss.CurrentResult]}
            Percent={
              Math.max((+initialDepositLoss.CurrentResult /
                +initialDepositLoss.MaxLoss) *
              100, 0)
            }
            Passed={initialDepositLoss.Reached ? 'Failed' : 'Clear'}
            chartColor="blue"
          />
        </div>
      </div>
    </>
  );
}
